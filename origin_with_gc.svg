<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="48228926"><g><title>&lt;cranelift_codegen::isa::x64::X64Backend as cranelift_codegen::isa::TargetIsa&gt;::compile_function (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="453" width="4.8501%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="463.50">&lt;crane..</text></g><g><title>cranelift_codegen::machinst::compile::compile (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="437" width="4.8501%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="447.50">cranel..</text></g><g><title>cranelift_codegen::isa::x64::lower::isle::generated_code::constructor_lower (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="421" width="4.8501%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="431.50">cranel..</text></g><g><title>asm_exc_page_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="405" width="4.8501%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="415.50">asm_ex..</text></g><g><title>exc_page_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="389" width="4.8501%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="399.50">exc_pa..</text></g><g><title>do_user_addr_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="373" width="4.8501%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="383.50">do_use..</text></g><g><title>handle_mm_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="357" width="4.8501%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="367.50">handle..</text></g><g><title>__handle_mm_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="341" width="4.8501%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="351.50">__hand..</text></g><g><title>do_fault (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="325" width="4.8501%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="335.50">do_fau..</text></g><g><title>filemap_map_pages (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="309" width="4.8501%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="319.50">filema..</text></g><g><title>next_uptodate_folio (2,339,164 samples, 4.85%)</title><rect x="0.0000%" y="293" width="4.8501%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2339164"/><text x="0.2500%" y="303.50">next_u..</text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="4.8501%" y="357" width="1.0398%" height="15" fill="rgb(240,193,28)" fg:x="2339164" fg:w="501504"/><text x="5.1001%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="4.8501%" y="341" width="1.0398%" height="15" fill="rgb(216,20,37)" fg:x="2339164" fg:w="501504"/><text x="5.1001%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,406,788 samples, 2.92%)</title><rect x="4.8501%" y="373" width="2.9169%" height="15" fill="rgb(206,188,39)" fg:x="2339164" fg:w="1406788"/><text x="5.1001%" y="383.50">[l..</text></g><g><title>asm_exc_page_fault (905,284 samples, 1.88%)</title><rect x="5.8900%" y="357" width="1.8771%" height="15" fill="rgb(217,207,13)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="367.50">a..</text></g><g><title>exc_page_fault (905,284 samples, 1.88%)</title><rect x="5.8900%" y="341" width="1.8771%" height="15" fill="rgb(231,73,38)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="351.50">e..</text></g><g><title>do_user_addr_fault (905,284 samples, 1.88%)</title><rect x="5.8900%" y="325" width="1.8771%" height="15" fill="rgb(225,20,46)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="335.50">d..</text></g><g><title>handle_mm_fault (905,284 samples, 1.88%)</title><rect x="5.8900%" y="309" width="1.8771%" height="15" fill="rgb(210,31,41)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="319.50">h..</text></g><g><title>__handle_mm_fault (905,284 samples, 1.88%)</title><rect x="5.8900%" y="293" width="1.8771%" height="15" fill="rgb(221,200,47)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="303.50">_..</text></g><g><title>do_wp_page (905,284 samples, 1.88%)</title><rect x="5.8900%" y="277" width="1.8771%" height="15" fill="rgb(226,26,5)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="287.50">d..</text></g><g><title>copy_mc_enhanced_fast_string (905,284 samples, 1.88%)</title><rect x="5.8900%" y="261" width="1.8771%" height="15" fill="rgb(249,33,26)" fg:x="2840668" fg:w="905284"/><text x="6.1400%" y="271.50">c..</text></g><g><title>[ld-linux-x86-64.so.2] (1,908,292 samples, 3.96%)</title><rect x="4.8501%" y="453" width="3.9567%" height="15" fill="rgb(235,183,28)" fg:x="2339164" fg:w="1908292"/><text x="5.1001%" y="463.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,908,292 samples, 3.96%)</title><rect x="4.8501%" y="437" width="3.9567%" height="15" fill="rgb(221,5,38)" fg:x="2339164" fg:w="1908292"/><text x="5.1001%" y="447.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,908,292 samples, 3.96%)</title><rect x="4.8501%" y="421" width="3.9567%" height="15" fill="rgb(247,18,42)" fg:x="2339164" fg:w="1908292"/><text x="5.1001%" y="431.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,908,292 samples, 3.96%)</title><rect x="4.8501%" y="405" width="3.9567%" height="15" fill="rgb(241,131,45)" fg:x="2339164" fg:w="1908292"/><text x="5.1001%" y="415.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,908,292 samples, 3.96%)</title><rect x="4.8501%" y="389" width="3.9567%" height="15" fill="rgb(249,31,29)" fg:x="2339164" fg:w="1908292"/><text x="5.1001%" y="399.50">[ld-..</text></g><g><title>_dl_catch_exception (501,504 samples, 1.04%)</title><rect x="7.7670%" y="373" width="1.0398%" height="15" fill="rgb(225,111,53)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="7.7670%" y="357" width="1.0398%" height="15" fill="rgb(238,160,17)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="7.7670%" y="341" width="1.0398%" height="15" fill="rgb(214,148,48)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="7.7670%" y="325" width="1.0398%" height="15" fill="rgb(232,36,49)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 1.04%)</title><rect x="7.7670%" y="309" width="1.0398%" height="15" fill="rgb(209,103,24)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (501,504 samples, 1.04%)</title><rect x="7.7670%" y="293" width="1.0398%" height="15" fill="rgb(229,88,8)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="303.50"></text></g><g><title>do_syscall_64 (501,504 samples, 1.04%)</title><rect x="7.7670%" y="277" width="1.0398%" height="15" fill="rgb(213,181,19)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="287.50"></text></g><g><title>ksys_mmap_pgoff (501,504 samples, 1.04%)</title><rect x="7.7670%" y="261" width="1.0398%" height="15" fill="rgb(254,191,54)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="271.50"></text></g><g><title>vm_mmap_pgoff (501,504 samples, 1.04%)</title><rect x="7.7670%" y="245" width="1.0398%" height="15" fill="rgb(241,83,37)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="255.50"></text></g><g><title>do_mmap (501,504 samples, 1.04%)</title><rect x="7.7670%" y="229" width="1.0398%" height="15" fill="rgb(233,36,39)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="239.50"></text></g><g><title>__mmap_region (501,504 samples, 1.04%)</title><rect x="7.7670%" y="213" width="1.0398%" height="15" fill="rgb(226,3,54)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="223.50"></text></g><g><title>vms_gather_munmap_vmas (501,504 samples, 1.04%)</title><rect x="7.7670%" y="197" width="1.0398%" height="15" fill="rgb(245,192,40)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="207.50"></text></g><g><title>__split_vma (501,504 samples, 1.04%)</title><rect x="7.7670%" y="181" width="1.0398%" height="15" fill="rgb(238,167,29)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="191.50"></text></g><g><title>mas_preallocate (501,504 samples, 1.04%)</title><rect x="7.7670%" y="165" width="1.0398%" height="15" fill="rgb(232,182,51)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="175.50"></text></g><g><title>mas_alloc_nodes (501,504 samples, 1.04%)</title><rect x="7.7670%" y="149" width="1.0398%" height="15" fill="rgb(231,60,39)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="159.50"></text></g><g><title>kmem_cache_alloc_bulk_noprof (501,504 samples, 1.04%)</title><rect x="7.7670%" y="133" width="1.0398%" height="15" fill="rgb(208,69,12)" fg:x="3745952" fg:w="501504"/><text x="8.0170%" y="143.50"></text></g><g><title>tokio::runtime::driver::Driver::new (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="309" width="2.8679%" height="15" fill="rgb(235,93,37)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="319.50">to..</text></g><g><title>tokio::runtime::time::Driver::new (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="293" width="2.8679%" height="15" fill="rgb(213,116,39)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="303.50">to..</text></g><g><title>[libc.so.6] (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="277" width="2.8679%" height="15" fill="rgb(222,207,29)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="287.50">[l..</text></g><g><title>asm_exc_page_fault (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="261" width="2.8679%" height="15" fill="rgb(206,96,30)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="271.50">as..</text></g><g><title>exc_page_fault (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="245" width="2.8679%" height="15" fill="rgb(218,138,4)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="255.50">ex..</text></g><g><title>do_user_addr_fault (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="229" width="2.8679%" height="15" fill="rgb(250,191,14)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="239.50">do..</text></g><g><title>handle_mm_fault (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="213" width="2.8679%" height="15" fill="rgb(239,60,40)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="223.50">ha..</text></g><g><title>__handle_mm_fault (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="197" width="2.8679%" height="15" fill="rgb(206,27,48)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="207.50">__..</text></g><g><title>do_anonymous_page (1,383,160 samples, 2.87%)</title><rect x="8.8069%" y="181" width="2.8679%" height="15" fill="rgb(225,35,8)" fg:x="4247456" fg:w="1383160"/><text x="9.0569%" y="191.50">do..</text></g><g><title>[libc.so.6] (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="213" width="3.5303%" height="15" fill="rgb(250,213,24)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="223.50">[li..</text></g><g><title>[libc.so.6] (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="197" width="3.5303%" height="15" fill="rgb(247,123,22)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="207.50">[li..</text></g><g><title>[libc.so.6] (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="181" width="3.5303%" height="15" fill="rgb(231,138,38)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="191.50">[li..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="165" width="3.5303%" height="15" fill="rgb(231,145,46)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="175.50">ent..</text></g><g><title>do_syscall_64 (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="149" width="3.5303%" height="15" fill="rgb(251,118,11)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="159.50">do_..</text></g><g><title>__do_sys_clone3 (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="133" width="3.5303%" height="15" fill="rgb(217,147,25)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="143.50">__d..</text></g><g><title>kernel_clone (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="117" width="3.5303%" height="15" fill="rgb(247,81,37)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="127.50">ker..</text></g><g><title>copy_process (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="101" width="3.5303%" height="15" fill="rgb(209,12,38)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="111.50">cop..</text></g><g><title>perf_event_init_task (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="85" width="3.5303%" height="15" fill="rgb(227,1,9)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="95.50">per..</text></g><g><title>inherit_task_group.isra.0 (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="69" width="3.5303%" height="15" fill="rgb(248,47,43)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="79.50">inh..</text></g><g><title>inherit_event.isra.0 (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="53" width="3.5303%" height="15" fill="rgb(221,10,30)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="63.50">inh..</text></g><g><title>perf_event_alloc (1,702,617 samples, 3.53%)</title><rect x="11.6748%" y="37" width="3.5303%" height="15" fill="rgb(210,229,1)" fg:x="5630616" fg:w="1702617"/><text x="11.9248%" y="47.50">per..</text></g><g><title>_start (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="453" width="10.4101%" height="15" fill="rgb(222,148,37)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="463.50">_start</text></g><g><title>__libc_start_main (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="437" width="10.4101%" height="15" fill="rgb(234,67,33)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="447.50">__libc_start_ma..</text></g><g><title>[libc.so.6] (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="421" width="10.4101%" height="15" fill="rgb(247,98,35)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="431.50">[libc.so.6]</text></g><g><title>main (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="405" width="10.4101%" height="15" fill="rgb(247,138,52)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="389" width="10.4101%" height="15" fill="rgb(213,79,30)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="399.50">std::rt::lang_s..</text></g><g><title>std::rt::lang_start::{{closure}} (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="373" width="10.4101%" height="15" fill="rgb(246,177,23)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="383.50">std::rt::lang_s..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="357" width="10.4101%" height="15" fill="rgb(230,62,27)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="367.50">std::sys::backt..</text></g><g><title>newemacs::main (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="341" width="10.4101%" height="15" fill="rgb(216,154,8)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="351.50">newemacs::main</text></g><g><title>tokio::runtime::builder::Builder::build (5,020,701 samples, 10.41%)</title><rect x="8.8069%" y="325" width="10.4101%" height="15" fill="rgb(244,35,45)" fg:x="4247456" fg:w="5020701"/><text x="9.0569%" y="335.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="309" width="7.5422%" height="15" fill="rgb(251,115,12)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="319.50">tokio::run..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="293" width="7.5422%" height="15" fill="rgb(240,54,50)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="303.50">tokio::run..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="277" width="7.5422%" height="15" fill="rgb(233,84,52)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="287.50">tokio::run..</text></g><g><title>std::thread::Builder::spawn_unchecked (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="261" width="7.5422%" height="15" fill="rgb(207,117,47)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="271.50">std::threa..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="245" width="7.5422%" height="15" fill="rgb(249,43,39)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="255.50">std::sys::..</text></g><g><title>pthread_create (3,637,541 samples, 7.54%)</title><rect x="11.6748%" y="229" width="7.5422%" height="15" fill="rgb(209,38,44)" fg:x="5630616" fg:w="3637541"/><text x="11.9248%" y="239.50">pthread_cr..</text></g><g><title>__mmap (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="213" width="4.0120%" height="15" fill="rgb(236,212,23)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="223.50">__mm..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="197" width="4.0120%" height="15" fill="rgb(242,79,21)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="207.50">entr..</text></g><g><title>do_syscall_64 (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="181" width="4.0120%" height="15" fill="rgb(211,96,35)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="191.50">do_s..</text></g><g><title>vm_mmap_pgoff (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="165" width="4.0120%" height="15" fill="rgb(253,215,40)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="175.50">vm_m..</text></g><g><title>up_write (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="149" width="4.0120%" height="15" fill="rgb(211,81,21)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="159.50">up_w..</text></g><g><title>rwsem_wake.isra.0 (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="133" width="4.0120%" height="15" fill="rgb(208,190,38)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="143.50">rwse..</text></g><g><title>wake_up_q (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="117" width="4.0120%" height="15" fill="rgb(235,213,38)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="127.50">wake..</text></g><g><title>try_to_wake_up (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="101" width="4.0120%" height="15" fill="rgb(237,122,38)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="111.50">try_..</text></g><g><title>__task_rq_lock (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="85" width="4.0120%" height="15" fill="rgb(244,218,35)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="95.50">__ta..</text></g><g><title>raw_spin_rq_lock_nested (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="69" width="4.0120%" height="15" fill="rgb(240,68,47)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="79.50">raw_..</text></g><g><title>_raw_spin_lock (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="53" width="4.0120%" height="15" fill="rgb(210,16,53)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="63.50">_raw..</text></g><g><title>native_queued_spin_lock_slowpath (1,934,924 samples, 4.01%)</title><rect x="15.2051%" y="37" width="4.0120%" height="15" fill="rgb(235,124,12)" fg:x="7333233" fg:w="1934924"/><text x="15.4551%" y="47.50">nati..</text></g><g><title>[unknown] (3,406,556 samples, 7.06%)</title><rect x="19.2170%" y="437" width="7.0633%" height="15" fill="rgb(224,169,11)" fg:x="9268157" fg:w="3406556"/><text x="19.4670%" y="447.50">[unknown]</text></g><g><title>newemacs::core::runtime::__wrapper_fn_load_symbol_value (3,406,556 samples, 7.06%)</title><rect x="19.2170%" y="421" width="7.0633%" height="15" fill="rgb(250,166,2)" fg:x="9268157" fg:w="3406556"/><text x="19.4670%" y="431.50">newemacs:..</text></g><g><title>newemacs::core::runtime::__wrapper_fn_funcall (17,996,193 samples, 37.31%)</title><rect x="19.2170%" y="453" width="37.3141%" height="15" fill="rgb(242,216,29)" fg:x="9268157" fg:w="17996193"/><text x="19.4670%" y="463.50">newemacs::core::runtime::__wrapper_fn_funcall</text></g><g><title>newemacs::core::env::StackMap::pop (14,589,637 samples, 30.25%)</title><rect x="26.2803%" y="437" width="30.2508%" height="15" fill="rgb(230,116,27)" fg:x="12674713" fg:w="14589637"/><text x="26.5303%" y="447.50">newemacs::core::env::StackMap::pop</text></g><g><title>scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync (12,189,405 samples, 25.27%)</title><rect x="31.2571%" y="421" width="25.2741%" height="15" fill="rgb(228,99,48)" fg:x="15074945" fg:w="12189405"/><text x="31.5071%" y="431.50">scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync</text></g><g><title>newemacs::core::object::Object::as_ref (3,645,578 samples, 7.56%)</title><rect x="72.1594%" y="421" width="7.5589%" height="15" fill="rgb(253,11,6)" fg:x="34801719" fg:w="3645578"/><text x="72.4094%" y="431.50">newemacs::..</text></g><g><title>newemacs::core::runtime::__wrapper_fn_load_symbol_value (15,518,829 samples, 32.18%)</title><rect x="56.5311%" y="453" width="32.1774%" height="15" fill="rgb(247,143,39)" fg:x="27264350" fg:w="15518829"/><text x="56.7811%" y="463.50">newemacs::core::runtime::__wrapper_fn_load_symbol_va..</text></g><g><title>newemacs::core::symbol::SymbolMap::get_symbol_cell_with (15,017,325 samples, 31.14%)</title><rect x="57.5710%" y="437" width="31.1376%" height="15" fill="rgb(236,97,10)" fg:x="27765854" fg:w="15017325"/><text x="57.8210%" y="447.50">newemacs::core::symbol::SymbolMap::get_symbol_cell..</text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::search_entry (4,335,882 samples, 8.99%)</title><rect x="79.7183%" y="421" width="8.9902%" height="15" fill="rgb(233,208,19)" fg:x="38447297" fg:w="4335882"/><text x="79.9683%" y="431.50">scc::hash_tab..</text></g><g><title>newemacs (47,727,422 samples, 98.96%)</title><rect x="0.0000%" y="469" width="98.9602%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="47727422"/><text x="0.2500%" y="479.50">newemacs</text></g><g><title>newemacs::core::runtime::__wrapper_fn_smaller_than (4,944,243 samples, 10.25%)</title><rect x="88.7085%" y="453" width="10.2516%" height="15" fill="rgb(220,129,5)" fg:x="42783179" fg:w="4944243"/><text x="88.9585%" y="463.50">newemacs::core:..</text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (4,944,243 samples, 10.25%)</title><rect x="88.7085%" y="437" width="10.2516%" height="15" fill="rgb(242,17,10)" fg:x="42783179" fg:w="4944243"/><text x="88.9585%" y="447.50">&lt;newemacs::core..</text></g><g><title>newemacs::core::object::Object::untag (2,769,524 samples, 5.74%)</title><rect x="93.2177%" y="421" width="5.7425%" height="15" fill="rgb(242,107,0)" fg:x="44957898" fg:w="2769524"/><text x="93.4677%" y="431.50">newemac..</text></g><g><title>all (48,228,926 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="48228926"/><text x="0.2500%" y="495.50"></text></g><g><title>tokio-runtime-w (501,504 samples, 1.04%)</title><rect x="98.9602%" y="469" width="1.0398%" height="15" fill="rgb(233,223,10)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="479.50"></text></g><g><title>[libc.so.6] (501,504 samples, 1.04%)</title><rect x="98.9602%" y="453" width="1.0398%" height="15" fill="rgb(215,21,27)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="463.50"></text></g><g><title>[libc.so.6] (501,504 samples, 1.04%)</title><rect x="98.9602%" y="437" width="1.0398%" height="15" fill="rgb(232,23,21)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="447.50"></text></g><g><title>__madvise (501,504 samples, 1.04%)</title><rect x="98.9602%" y="421" width="1.0398%" height="15" fill="rgb(244,5,23)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (501,504 samples, 1.04%)</title><rect x="98.9602%" y="405" width="1.0398%" height="15" fill="rgb(226,81,46)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="415.50"></text></g><g><title>do_syscall_64 (501,504 samples, 1.04%)</title><rect x="98.9602%" y="389" width="1.0398%" height="15" fill="rgb(247,70,30)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="399.50"></text></g><g><title>__x64_sys_madvise (501,504 samples, 1.04%)</title><rect x="98.9602%" y="373" width="1.0398%" height="15" fill="rgb(212,68,19)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="383.50"></text></g><g><title>do_madvise (501,504 samples, 1.04%)</title><rect x="98.9602%" y="357" width="1.0398%" height="15" fill="rgb(240,187,13)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="367.50"></text></g><g><title>tlb_finish_mmu (501,504 samples, 1.04%)</title><rect x="98.9602%" y="341" width="1.0398%" height="15" fill="rgb(223,113,26)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="351.50"></text></g><g><title>flush_tlb_mm_range (501,504 samples, 1.04%)</title><rect x="98.9602%" y="325" width="1.0398%" height="15" fill="rgb(206,192,2)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="335.50"></text></g><g><title>on_each_cpu_cond_mask (501,504 samples, 1.04%)</title><rect x="98.9602%" y="309" width="1.0398%" height="15" fill="rgb(241,108,4)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="319.50"></text></g><g><title>smp_call_function_many_cond (501,504 samples, 1.04%)</title><rect x="98.9602%" y="293" width="1.0398%" height="15" fill="rgb(247,173,49)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="303.50"></text></g><g><title>asm_sysvec_call_function (501,504 samples, 1.04%)</title><rect x="98.9602%" y="277" width="1.0398%" height="15" fill="rgb(224,114,35)" fg:x="47727422" fg:w="501504"/><text x="99.2102%" y="287.50"></text></g></svg></svg>