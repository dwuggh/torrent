<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="19031597128"><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (135,255,323 samples, 0.71%)</title><rect x="0.0000%" y="565" width="0.7107%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="135255323"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (10,586,250 samples, 0.06%)</title><rect x="0.7160%" y="549" width="0.0556%" height="15" fill="rgb(217,0,24)" fg:x="136258331" fg:w="10586250"/><text x="0.9660%" y="559.50"></text></g><g><title>newemacs::core::env::StackMap::pop (105,871,494 samples, 0.56%)</title><rect x="0.7716%" y="549" width="0.5563%" height="15" fill="rgb(221,193,54)" fg:x="146844581" fg:w="105871494"/><text x="1.0216%" y="559.50"></text></g><g><title>newemacs::core::env::StackMap::push (195,803,780 samples, 1.03%)</title><rect x="1.3279%" y="549" width="1.0288%" height="15" fill="rgb(248,212,6)" fg:x="252716075" fg:w="195803780"/><text x="1.5779%" y="559.50"></text></g><g><title>newemacs::core::object::Object::as_ref (47,641,161 samples, 0.25%)</title><rect x="2.3567%" y="549" width="0.2503%" height="15" fill="rgb(208,68,35)" fg:x="448519855" fg:w="47641161"/><text x="2.6067%" y="559.50"></text></g><g><title>newemacs::core::object::Object::untag (58,231,853 samples, 0.31%)</title><rect x="2.6070%" y="549" width="0.3060%" height="15" fill="rgb(232,128,0)" fg:x="496161016" fg:w="58231853"/><text x="2.8570%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_add (21,175,648 samples, 0.11%)</title><rect x="2.9130%" y="549" width="0.1113%" height="15" fill="rgb(207,160,47)" fg:x="554392869" fg:w="21175648"/><text x="3.1630%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_funcall (63,522,787 samples, 0.33%)</title><rect x="3.0243%" y="549" width="0.3338%" height="15" fill="rgb(228,23,34)" fg:x="575568517" fg:w="63522787"/><text x="3.2743%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_minus (47,643,543 samples, 0.25%)</title><rect x="3.3581%" y="549" width="0.2503%" height="15" fill="rgb(218,30,26)" fg:x="639091304" fg:w="47643543"/><text x="3.6081%" y="559.50"></text></g><g><title>[unknown] (587,534,649 samples, 3.09%)</title><rect x="0.7160%" y="565" width="3.0872%" height="15" fill="rgb(220,122,19)" fg:x="136258331" fg:w="587534649"/><text x="0.9660%" y="575.50">[un..</text></g><g><title>scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync (37,058,133 samples, 0.19%)</title><rect x="3.6084%" y="549" width="0.1947%" height="15" fill="rgb(250,228,42)" fg:x="686734847" fg:w="37058133"/><text x="3.8584%" y="559.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (37,049,030 samples, 0.19%)</title><rect x="3.8031%" y="565" width="0.1947%" height="15" fill="rgb(240,193,28)" fg:x="723792980" fg:w="37049030"/><text x="4.0531%" y="575.50"></text></g><g><title>copy_process (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="213" width="0.0106%" height="15" fill="rgb(216,20,37)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="223.50"></text></g><g><title>perf_event_init_task (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="197" width="0.0106%" height="15" fill="rgb(206,188,39)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="207.50"></text></g><g><title>inherit_task_group.isra.0 (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="181" width="0.0106%" height="15" fill="rgb(217,207,13)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="191.50"></text></g><g><title>inherit_event.isra.0 (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="165" width="0.0106%" height="15" fill="rgb(231,73,38)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="175.50"></text></g><g><title>perf_event_alloc (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="149" width="0.0106%" height="15" fill="rgb(225,20,46)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="159.50"></text></g><g><title>kmem_cache_alloc_node_noprof (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="133" width="0.0106%" height="15" fill="rgb(210,31,41)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="143.50"></text></g><g><title>___slab_alloc (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="117" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="127.50"></text></g><g><title>allocate_slab (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="101" width="0.0106%" height="15" fill="rgb(226,26,5)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="111.50"></text></g><g><title>__alloc_frozen_pages_noprof (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="85" width="0.0106%" height="15" fill="rgb(249,33,26)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="95.50"></text></g><g><title>get_page_from_freelist (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="69" width="0.0106%" height="15" fill="rgb(235,183,28)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="79.50"></text></g><g><title>prep_new_page (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="53" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="63.50"></text></g><g><title>clear_page_erms (2,018,044 samples, 0.01%)</title><rect x="3.9978%" y="37" width="0.0106%" height="15" fill="rgb(247,18,42)" fg:x="760842010" fg:w="2018044"/><text x="4.2478%" y="47.50"></text></g><g><title>_start (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="565" width="0.0189%" height="15" fill="rgb(241,131,45)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="575.50"></text></g><g><title>__libc_start_main (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="549" width="0.0189%" height="15" fill="rgb(249,31,29)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="559.50"></text></g><g><title>[libc.so.6] (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="533" width="0.0189%" height="15" fill="rgb(225,111,53)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="543.50"></text></g><g><title>main (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="517" width="0.0189%" height="15" fill="rgb(238,160,17)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="527.50"></text></g><g><title>std::rt::lang_start_internal (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="501" width="0.0189%" height="15" fill="rgb(214,148,48)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="511.50"></text></g><g><title>std::rt::lang_start::{{closure}} (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="485" width="0.0189%" height="15" fill="rgb(232,36,49)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="495.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="469" width="0.0189%" height="15" fill="rgb(209,103,24)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="479.50"></text></g><g><title>newemacs::main (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="453" width="0.0189%" height="15" fill="rgb(229,88,8)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="463.50"></text></g><g><title>tokio::runtime::builder::Builder::build (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="437" width="0.0189%" height="15" fill="rgb(213,181,19)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="421" width="0.0189%" height="15" fill="rgb(254,191,54)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="431.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="405" width="0.0189%" height="15" fill="rgb(241,83,37)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="415.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="389" width="0.0189%" height="15" fill="rgb(233,36,39)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="399.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="373" width="0.0189%" height="15" fill="rgb(226,3,54)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="357" width="0.0189%" height="15" fill="rgb(245,192,40)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="367.50"></text></g><g><title>pthread_create (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="341" width="0.0189%" height="15" fill="rgb(238,167,29)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="351.50"></text></g><g><title>[libc.so.6] (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="325" width="0.0189%" height="15" fill="rgb(232,182,51)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="335.50"></text></g><g><title>[libc.so.6] (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="309" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="319.50"></text></g><g><title>[libc.so.6] (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="293" width="0.0189%" height="15" fill="rgb(208,69,12)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="277" width="0.0189%" height="15" fill="rgb(235,93,37)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="287.50"></text></g><g><title>do_syscall_64 (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="261" width="0.0189%" height="15" fill="rgb(213,116,39)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="271.50"></text></g><g><title>__do_sys_clone3 (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="245" width="0.0189%" height="15" fill="rgb(222,207,29)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="255.50"></text></g><g><title>kernel_clone (3,601,581 samples, 0.02%)</title><rect x="3.9978%" y="229" width="0.0189%" height="15" fill="rgb(206,96,30)" fg:x="760842010" fg:w="3601581"/><text x="4.2478%" y="239.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5,294,018 samples, 0.03%)</title><rect x="4.0223%" y="565" width="0.0278%" height="15" fill="rgb(218,138,4)" fg:x="765506004" fg:w="5294018"/><text x="4.2723%" y="575.50"></text></g><g><title>cfree (63,526,819 samples, 0.33%)</title><rect x="4.0501%" y="565" width="0.3338%" height="15" fill="rgb(250,191,14)" fg:x="770800022" fg:w="63526819"/><text x="4.3001%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;newemacs::core::error::RuntimeError&gt; (55,833,888 samples, 0.29%)</title><rect x="4.3839%" y="565" width="0.2934%" height="15" fill="rgb(239,60,40)" fg:x="834326841" fg:w="55833888"/><text x="4.6339%" y="575.50"></text></g><g><title>cranelift_codegen::machinst::compile::compile (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="565" width="0.0134%" height="15" fill="rgb(206,27,48)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="575.50"></text></g><g><title>regalloc2::run (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="549" width="0.0134%" height="15" fill="rgb(225,35,8)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="559.50"></text></g><g><title>regalloc2::ion::run (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="533" width="0.0134%" height="15" fill="rgb(250,213,24)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="543.50"></text></g><g><title>regalloc2::ion::&lt;impl regalloc2::ion::data_structures::Env&lt;F&gt;&gt;::run (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="517" width="0.0134%" height="15" fill="rgb(247,123,22)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="527.50"></text></g><g><title>regalloc2::ion::process::&lt;impl regalloc2::ion::data_structures::Env&lt;F&gt;&gt;::split_and_requeue_bundle (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="501" width="0.0134%" height="15" fill="rgb(231,138,38)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="511.50"></text></g><g><title>asm_exc_page_fault (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="485" width="0.0134%" height="15" fill="rgb(231,145,46)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="495.50"></text></g><g><title>exc_page_fault (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="469" width="0.0134%" height="15" fill="rgb(251,118,11)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="479.50"></text></g><g><title>do_user_addr_fault (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="453" width="0.0134%" height="15" fill="rgb(217,147,25)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="463.50"></text></g><g><title>handle_mm_fault (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="437" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="447.50"></text></g><g><title>__handle_mm_fault (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="421" width="0.0134%" height="15" fill="rgb(209,12,38)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="431.50"></text></g><g><title>do_anonymous_page (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="405" width="0.0134%" height="15" fill="rgb(227,1,9)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="415.50"></text></g><g><title>__pte_offset_map_lock (2,551,670 samples, 0.01%)</title><rect x="4.6773%" y="389" width="0.0134%" height="15" fill="rgb(248,47,43)" fg:x="890160729" fg:w="2551670"/><text x="4.9273%" y="399.50"></text></g><g><title>malloc (47,641,073 samples, 0.25%)</title><rect x="4.6907%" y="565" width="0.2503%" height="15" fill="rgb(221,10,30)" fg:x="892712399" fg:w="47641073"/><text x="4.9407%" y="575.50"></text></g><g><title>newemacs::core::env::StackMap::pop (111,171,764 samples, 0.58%)</title><rect x="4.9410%" y="565" width="0.5841%" height="15" fill="rgb(210,229,1)" fg:x="940353472" fg:w="111171764"/><text x="5.1910%" y="575.50"></text></g><g><title>newemacs::core::env::StackMap::push (211,721,166 samples, 1.11%)</title><rect x="5.5252%" y="565" width="1.1125%" height="15" fill="rgb(222,148,37)" fg:x="1051525236" fg:w="211721166"/><text x="5.7752%" y="575.50"></text></g><g><title>newemacs::core::object::Object::as_ref (521,860,348 samples, 2.74%)</title><rect x="6.6376%" y="565" width="2.7421%" height="15" fill="rgb(234,67,33)" fg:x="1263246402" fg:w="521860348"/><text x="6.8876%" y="575.50">ne..</text></g><g><title>newemacs::core::object::Object::untag (74,104,039 samples, 0.39%)</title><rect x="9.3797%" y="565" width="0.3894%" height="15" fill="rgb(247,98,35)" fg:x="1785106750" fg:w="74104039"/><text x="9.6297%" y="575.50"></text></g><g><title>newemacs::core::env::StackMap::push (26,471,363 samples, 0.14%)</title><rect x="11.8202%" y="549" width="0.1391%" height="15" fill="rgb(247,138,52)" fg:x="2249567604" fg:w="26471363"/><text x="12.0702%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_add (506,718,051 samples, 2.66%)</title><rect x="9.7691%" y="565" width="2.6625%" height="15" fill="rgb(213,79,30)" fg:x="1859210789" fg:w="506718051"/><text x="10.0191%" y="575.50">ne..</text></g><g><title>newemacs::core::object::Object::as_ref (89,889,873 samples, 0.47%)</title><rect x="11.9593%" y="549" width="0.4723%" height="15" fill="rgb(246,177,23)" fg:x="2276038967" fg:w="89889873"/><text x="12.2093%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="533" width="0.0278%" height="15" fill="rgb(230,62,27)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="543.50"></text></g><g><title>sysvec_apic_timer_interrupt (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="517" width="0.0278%" height="15" fill="rgb(216,154,8)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="527.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="501" width="0.0278%" height="15" fill="rgb(244,35,45)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="511.50"></text></g><g><title>hrtimer_interrupt (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="485" width="0.0278%" height="15" fill="rgb(251,115,12)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="495.50"></text></g><g><title>clockevents_program_event (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="469" width="0.0278%" height="15" fill="rgb(240,54,50)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="479.50"></text></g><g><title>ktime_get (5,293,691 samples, 0.03%)</title><rect x="12.4038%" y="453" width="0.0278%" height="15" fill="rgb(233,84,52)" fg:x="2360635149" fg:w="5293691"/><text x="12.6538%" y="463.50"></text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (60,292,735 samples, 0.32%)</title><rect x="16.2809%" y="549" width="0.3168%" height="15" fill="rgb(207,117,47)" fg:x="3098523239" fg:w="60292735"/><text x="16.5309%" y="559.50"></text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (126,788,005 samples, 0.67%)</title><rect x="16.5977%" y="533" width="0.6662%" height="15" fill="rgb(249,43,39)" fg:x="3158815974" fg:w="126788005"/><text x="16.8477%" y="543.50"></text></g><g><title>newemacs::core::object::Object::as_ref (37,050,861 samples, 0.19%)</title><rect x="17.2639%" y="533" width="0.1947%" height="15" fill="rgb(209,38,44)" fg:x="3285603979" fg:w="37050861"/><text x="17.5139%" y="543.50"></text></g><g><title>newemacs::core::object::Object::untag (100,584,274 samples, 0.53%)</title><rect x="17.4586%" y="533" width="0.5285%" height="15" fill="rgb(236,212,23)" fg:x="3322654840" fg:w="100584274"/><text x="17.7086%" y="543.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_get_func_ptr (116,459,759 samples, 0.61%)</title><rect x="17.9871%" y="533" width="0.6119%" height="15" fill="rgb(242,79,21)" fg:x="3423239114" fg:w="116459759"/><text x="18.2371%" y="543.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_load_symbol_value (322,779,458 samples, 1.70%)</title><rect x="18.5991%" y="533" width="1.6960%" height="15" fill="rgb(211,96,35)" fg:x="3539698873" fg:w="322779458"/><text x="18.8491%" y="543.50"></text></g><g><title>[unknown] (708,956,426 samples, 3.73%)</title><rect x="16.5977%" y="549" width="3.7252%" height="15" fill="rgb(253,215,40)" fg:x="3158815974" fg:w="708956426"/><text x="16.8477%" y="559.50">[unk..</text></g><g><title>newemacs::core::runtime::__wrapper_fn_smaller_than (5,294,069 samples, 0.03%)</title><rect x="20.2951%" y="533" width="0.0278%" height="15" fill="rgb(211,81,21)" fg:x="3862478331" fg:w="5294069"/><text x="20.5451%" y="543.50"></text></g><g><title>__rustc::__rdl_alloc (95,276,594 samples, 0.50%)</title><rect x="20.3229%" y="549" width="0.5006%" height="15" fill="rgb(208,190,38)" fg:x="3867772400" fg:w="95276594"/><text x="20.5729%" y="559.50"></text></g><g><title>__rustc::__rdl_dealloc (21,175,534 samples, 0.11%)</title><rect x="20.8235%" y="549" width="0.1113%" height="15" fill="rgb(235,213,38)" fg:x="3963048994" fg:w="21175534"/><text x="21.0735%" y="559.50"></text></g><g><title>__rustc::__rust_alloc (5,294,118 samples, 0.03%)</title><rect x="20.9348%" y="549" width="0.0278%" height="15" fill="rgb(237,122,38)" fg:x="3984224528" fg:w="5294118"/><text x="21.1848%" y="559.50"></text></g><g><title>__rustc::__rust_dealloc (31,761,181 samples, 0.17%)</title><rect x="20.9626%" y="549" width="0.1669%" height="15" fill="rgb(244,218,35)" fg:x="3989518646" fg:w="31761181"/><text x="21.2126%" y="559.50"></text></g><g><title>cfree (195,470,262 samples, 1.03%)</title><rect x="21.1295%" y="549" width="1.0271%" height="15" fill="rgb(240,68,47)" fg:x="4021279827" fg:w="195470262"/><text x="21.3795%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;newemacs::core::error::RuntimeError&gt; (164,100,203 samples, 0.86%)</title><rect x="22.1566%" y="549" width="0.8623%" height="15" fill="rgb(210,16,53)" fg:x="4216750089" fg:w="164100203"/><text x="22.4066%" y="559.50"></text></g><g><title>malloc (238,189,177 samples, 1.25%)</title><rect x="23.0188%" y="549" width="1.2515%" height="15" fill="rgb(235,124,12)" fg:x="4380850292" fg:w="238189177"/><text x="23.2688%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="517" width="0.0278%" height="15" fill="rgb(224,169,11)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="501" width="0.0278%" height="15" fill="rgb(250,166,2)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="485" width="0.0278%" height="15" fill="rgb(242,216,29)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="495.50"></text></g><g><title>hrtimer_interrupt (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="469" width="0.0278%" height="15" fill="rgb(230,116,27)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="479.50"></text></g><g><title>__hrtimer_run_queues (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="453" width="0.0278%" height="15" fill="rgb(228,99,48)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="463.50"></text></g><g><title>tick_nohz_handler (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="437" width="0.0278%" height="15" fill="rgb(253,11,6)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="447.50"></text></g><g><title>update_process_times (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="421" width="0.0278%" height="15" fill="rgb(247,143,39)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="431.50"></text></g><g><title>sched_tick (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="405" width="0.0278%" height="15" fill="rgb(236,97,10)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="415.50"></text></g><g><title>task_tick_fair (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="389" width="0.0278%" height="15" fill="rgb(233,208,19)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="399.50"></text></g><g><title>update_load_avg (5,293,136 samples, 0.03%)</title><rect x="32.1747%" y="373" width="0.0278%" height="15" fill="rgb(216,164,2)" fg:x="6123355341" fg:w="5293136"/><text x="32.4247%" y="383.50"></text></g><g><title>newemacs::core::env::StackMap::pop (1,716,053,136 samples, 9.02%)</title><rect x="24.2704%" y="549" width="9.0169%" height="15" fill="rgb(220,129,5)" fg:x="4619039469" fg:w="1716053136"/><text x="24.5204%" y="559.50">newemacs::cor..</text></g><g><title>scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync (1,287,609,046 samples, 6.77%)</title><rect x="26.5216%" y="533" width="6.7656%" height="15" fill="rgb(242,17,10)" fg:x="5047483559" fg:w="1287609046"/><text x="26.7716%" y="543.50">scc::hash..</text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::get_entry_ptr (206,444,128 samples, 1.08%)</title><rect x="32.2025%" y="517" width="1.0847%" height="15" fill="rgb(242,107,0)" fg:x="6128648477" fg:w="206444128"/><text x="32.4525%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="517" width="0.0536%" height="15" fill="rgb(251,28,31)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="501" width="0.0536%" height="15" fill="rgb(233,223,10)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="485" width="0.0536%" height="15" fill="rgb(215,21,27)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="495.50"></text></g><g><title>hrtimer_interrupt (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="469" width="0.0536%" height="15" fill="rgb(232,23,21)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="479.50"></text></g><g><title>__hrtimer_run_queues (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="453" width="0.0536%" height="15" fill="rgb(244,5,23)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="463.50"></text></g><g><title>tick_nohz_handler (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="437" width="0.0536%" height="15" fill="rgb(226,81,46)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="447.50"></text></g><g><title>update_process_times (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="421" width="0.0536%" height="15" fill="rgb(247,70,30)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="431.50"></text></g><g><title>tmigr_requires_handle_remote (10,201,597 samples, 0.05%)</title><rect x="40.2067%" y="405" width="0.0536%" height="15" fill="rgb(212,68,19)" fg:x="7651985096" fg:w="10201597"/><text x="40.4567%" y="415.50"></text></g><g><title>newemacs::core::env::StackMap::push (1,559,760,035 samples, 8.20%)</title><rect x="33.2872%" y="549" width="8.1956%" height="15" fill="rgb(240,187,13)" fg:x="6335092605" fg:w="1559760035"/><text x="33.5372%" y="559.50">newemacs::c..</text></g><g><title>scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync (1,056,858,934 samples, 5.55%)</title><rect x="35.9297%" y="533" width="5.5532%" height="15" fill="rgb(223,113,26)" fg:x="6837993706" fg:w="1056858934"/><text x="36.1797%" y="543.50">scc::ha..</text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::get_entry_ptr (232,665,947 samples, 1.22%)</title><rect x="40.2603%" y="517" width="1.2225%" height="15" fill="rgb(206,192,2)" fg:x="7662186693" fg:w="232665947"/><text x="40.5103%" y="527.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_funcall (5,608,325,698 samples, 29.47%)</title><rect x="12.4316%" y="565" width="29.4685%" height="15" fill="rgb(241,108,4)" fg:x="2365928840" fg:w="5608325698"/><text x="12.6816%" y="575.50">newemacs::core::runtime::__wrapper_fn_funcall</text></g><g><title>newemacs::core::object::Object::as_ref (79,401,898 samples, 0.42%)</title><rect x="41.4829%" y="549" width="0.4172%" height="15" fill="rgb(247,173,49)" fg:x="7894852640" fg:w="79401898"/><text x="41.7329%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_get_func_ptr (303,333,167 samples, 1.59%)</title><rect x="41.9001%" y="565" width="1.5938%" height="15" fill="rgb(224,114,35)" fg:x="7974254538" fg:w="303333167"/><text x="42.1501%" y="575.50"></text></g><g><title>newemacs::core::object::Object::as_ref (190,565,963 samples, 1.00%)</title><rect x="42.4926%" y="549" width="1.0013%" height="15" fill="rgb(245,159,27)" fg:x="8087021742" fg:w="190565963"/><text x="42.7426%" y="559.50"></text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (491,473,630 samples, 2.58%)</title><rect x="48.1389%" y="549" width="2.5824%" height="15" fill="rgb(245,172,44)" fg:x="9161601966" fg:w="491473630"/><text x="48.3889%" y="559.50">&lt;n..</text></g><g><title>newemacs::core::object::Object::untag (201,142,444 samples, 1.06%)</title><rect x="49.6644%" y="533" width="1.0569%" height="15" fill="rgb(236,23,11)" fg:x="9451933152" fg:w="201142444"/><text x="49.9144%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6,381,494 samples, 0.03%)</title><rect x="72.5838%" y="533" width="0.0335%" height="15" fill="rgb(205,117,38)" fg:x="13813858406" fg:w="6381494"/><text x="72.8338%" y="543.50"></text></g><g><title>sysvec_apic_timer_interrupt (6,381,494 samples, 0.03%)</title><rect x="72.5838%" y="517" width="0.0335%" height="15" fill="rgb(237,72,25)" fg:x="13813858406" fg:w="6381494"/><text x="72.8338%" y="527.50"></text></g><g><title>__sysvec_apic_timer_interrupt (6,381,494 samples, 0.03%)</title><rect x="72.5838%" y="501" width="0.0335%" height="15" fill="rgb(244,70,9)" fg:x="13813858406" fg:w="6381494"/><text x="72.8338%" y="511.50"></text></g><g><title>hrtimer_interrupt (6,381,494 samples, 0.03%)</title><rect x="72.5838%" y="485" width="0.0335%" height="15" fill="rgb(217,125,39)" fg:x="13813858406" fg:w="6381494"/><text x="72.8338%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;newemacs::core::error::RuntimeError&gt; (216,796,444 samples, 1.14%)</title><rect x="72.6173%" y="533" width="1.1391%" height="15" fill="rgb(235,36,10)" fg:x="13820239900" fg:w="216796444"/><text x="72.8673%" y="543.50"></text></g><g><title>newemacs::core::object::Object::as_ref (407,563,799 samples, 2.14%)</title><rect x="73.7565%" y="533" width="2.1415%" height="15" fill="rgb(251,123,47)" fg:x="14037036344" fg:w="407563799"/><text x="74.0065%" y="543.50">n..</text></g><g><title>asm_sysvec_apic_timer_interrupt (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="517" width="0.0278%" height="15" fill="rgb(221,13,13)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="501" width="0.0278%" height="15" fill="rgb(238,131,9)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="485" width="0.0278%" height="15" fill="rgb(211,50,8)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="495.50"></text></g><g><title>hrtimer_interrupt (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="469" width="0.0278%" height="15" fill="rgb(245,182,24)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="479.50"></text></g><g><title>__hrtimer_run_queues (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="453" width="0.0278%" height="15" fill="rgb(242,14,37)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="463.50"></text></g><g><title>tick_nohz_handler (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="437" width="0.0278%" height="15" fill="rgb(246,228,12)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="447.50"></text></g><g><title>update_process_times (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="421" width="0.0278%" height="15" fill="rgb(213,55,15)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="431.50"></text></g><g><title>sched_tick (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="405" width="0.0278%" height="15" fill="rgb(209,9,3)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="415.50"></text></g><g><title>task_tick_fair (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="389" width="0.0278%" height="15" fill="rgb(230,59,30)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="399.50"></text></g><g><title>update_load_avg (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="373" width="0.0278%" height="15" fill="rgb(209,121,21)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="383.50"></text></g><g><title>__update_load_avg_se (5,293,656 samples, 0.03%)</title><rect x="75.8702%" y="357" width="0.0278%" height="15" fill="rgb(220,109,13)" fg:x="14439306487" fg:w="5293656"/><text x="76.1202%" y="367.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_load_symbol_value (8,066,709,936 samples, 42.39%)</title><rect x="43.4939%" y="565" width="42.3859%" height="15" fill="rgb(232,18,1)" fg:x="8277587705" fg:w="8066709936"/><text x="43.7439%" y="575.50">newemacs::core::runtime::__wrapper_fn_load_symbol_value</text></g><g><title>newemacs::core::symbol::SymbolMap::get_symbol_cell_with (6,691,222,045 samples, 35.16%)</title><rect x="50.7213%" y="549" width="35.1585%" height="15" fill="rgb(215,41,42)" fg:x="9653075596" fg:w="6691222045"/><text x="50.9713%" y="559.50">newemacs::core::symbol::SymbolMap::get_symbol_cell_with</text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::search_entry (1,899,697,498 samples, 9.98%)</title><rect x="75.8980%" y="533" width="9.9818%" height="15" fill="rgb(224,123,36)" fg:x="14444600143" fg:w="1899697498"/><text x="76.1480%" y="543.50">scc::hash_tabl..</text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (227,615,274 samples, 1.20%)</title><rect x="87.9915%" y="549" width="1.1960%" height="15" fill="rgb(240,125,3)" fg:x="16746184341" fg:w="227615274"/><text x="88.2415%" y="559.50"></text></g><g><title>newemacs::core::object::Object::untag (95,283,508 samples, 0.50%)</title><rect x="88.6868%" y="533" width="0.5007%" height="15" fill="rgb(205,98,50)" fg:x="16878516107" fg:w="95283508"/><text x="88.9368%" y="543.50"></text></g><g><title>newemacs::core::env::StackMap::push (10,587,690 samples, 0.06%)</title><rect x="89.1875%" y="549" width="0.0556%" height="15" fill="rgb(205,185,37)" fg:x="16973799615" fg:w="10587690"/><text x="89.4375%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_minus (820,057,095 samples, 4.31%)</title><rect x="85.8798%" y="565" width="4.3089%" height="15" fill="rgb(238,207,15)" fg:x="16344297641" fg:w="820057095"/><text x="86.1298%" y="575.50">newem..</text></g><g><title>newemacs::core::object::Object::as_ref (179,967,431 samples, 0.95%)</title><rect x="89.2431%" y="549" width="0.9456%" height="15" fill="rgb(213,199,42)" fg:x="16984387305" fg:w="179967431"/><text x="89.4931%" y="559.50"></text></g><g><title>newemacs::core::runtime::__wrapper_fn_smaller_than (851,963,156 samples, 4.48%)</title><rect x="90.1887%" y="565" width="4.4766%" height="15" fill="rgb(235,201,11)" fg:x="17164354736" fg:w="851963156"/><text x="90.4387%" y="575.50">newem..</text></g><g><title>&lt;newemacs::core::object::Object as core::ops::drop::Drop&gt;::drop (619,138,376 samples, 3.25%)</title><rect x="91.4121%" y="549" width="3.2532%" height="15" fill="rgb(207,46,11)" fg:x="17397179516" fg:w="619138376"/><text x="91.6621%" y="559.50">&lt;ne..</text></g><g><title>newemacs::core::object::Object::untag (232,908,558 samples, 1.22%)</title><rect x="93.4415%" y="533" width="1.2238%" height="15" fill="rgb(241,35,35)" fg:x="17783409334" fg:w="232908558"/><text x="93.6915%" y="543.50"></text></g><g><title>newemacs::core::symbol::SymbolMap::get_symbol_cell_with (724,236,658 samples, 3.81%)</title><rect x="94.6653%" y="565" width="3.8054%" height="15" fill="rgb(243,32,47)" fg:x="18016317892" fg:w="724236658"/><text x="94.9153%" y="575.50">newe..</text></g><g><title>scc::hash_map::HashMap&lt;K,V,H&gt;::get_sync (111,141,408 samples, 0.58%)</title><rect x="98.4707%" y="565" width="0.5840%" height="15" fill="rgb(247,202,23)" fg:x="18740554550" fg:w="111141408"/><text x="98.7207%" y="575.50"></text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::get_entry_ptr (31,756,074 samples, 0.17%)</title><rect x="99.0547%" y="565" width="0.1669%" height="15" fill="rgb(219,102,11)" fg:x="18851695958" fg:w="31756074"/><text x="99.3047%" y="575.50"></text></g><g><title>all (19,031,597,128 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="19031597128"/><text x="0.2500%" y="607.50"></text></g><g><title>newemacs (19,031,597,128 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="19031597128"/><text x="0.2500%" y="591.50">newemacs</text></g><g><title>scc::hash_table::bucket::Bucket&lt;K,V,L,_&gt;::search_entry (148,145,096 samples, 0.78%)</title><rect x="99.2216%" y="565" width="0.7784%" height="15" fill="rgb(216,99,12)" fg:x="18883452032" fg:w="148145096"/><text x="99.4716%" y="575.50"></text></g></svg></svg>